name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  DOCKER_IMAGE: secret-santa-app

jobs:
  # Job 1: Lint and Type Check
  lint-and-type-check:
    name: "Lint & Type Check"
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

  # Job 2: Unit Tests
  # unit-tests:
  #   name: "Unit Tests"
  #   runs-on: ubuntu-latest
  #   needs: lint-and-type-check

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: "npm"

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Run unit tests with coverage
  #       run: npm run test:coverage

  #     - name: Upload coverage reports
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: coverage-report
  #         path: coverage/

  # Job 3: E2E Tests
  # e2e-tests:
  #   name: "E2E Tests"
  #   runs-on: ubuntu-latest
  #   needs: unit-tests

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: "npm"

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Setup Playwright browsers
  #       run: npx playwright install --with-deps chromium

  #     - name: Run E2E tests
  #       run: npm run test:e2e
  #       env:
  #         BASE_URL: http://localhost:3000
  #         PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL || 'https://test-project.supabase.co' }}
  #         PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PUBLIC_SUPABASE_ANON_KEY || 'test-anon-key' }}
  #         NODE_ENV: test

  #     - name: Upload E2E test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: e2e-test-results
  #         path: |
  #           playwright-report/
  #           test-results/

  # Job 4: Build & Deploy
  build-and-deploy:
    name: "Build & Deploy"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint-and-type-check]
    if: github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build production
        run: npm run build

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (if deploying)
        uses: docker/login-action@v3
        if: env.DOCKERHUB_USERNAME != ''
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ env.DOCKERHUB_USERNAME != '' }}
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            ${{ env.DOCKERHUB_USERNAME != '' && format('{0}/{1}:latest', env.DOCKERHUB_USERNAME, env.DOCKER_IMAGE) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image locally
        run: |
          # Build image locally for testing
          docker build -t ${{ env.DOCKER_IMAGE }}:test .

          # Run container and test health endpoint
          docker run --rm -d --name test-app -p 3000:3000 ${{ env.DOCKER_IMAGE }}:test

          # Wait for app to start and test
          timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done'

          # Health check
          curl -f http://localhost:3000 || exit 1

          # Cleanup
          docker stop test-app

      - name: Deploy to DigitalOcean (Optional)
        if: env.DIGITALOCEAN_ACCESS_TOKEN != ''
        run: |
          echo "Deployment to DigitalOcean would go here"
          # Add your DigitalOcean deployment commands here
          # Example: doctl apps create --spec app-spec.yml
        env:
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
