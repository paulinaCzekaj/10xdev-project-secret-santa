---
alwaysApply: true
---

# Playwright E2E Testing Guidelines

## Test Structure

- Group related tests using `test.describe()`
- Use descriptive test names that explain the user journey
- Follow Given-When-Then pattern for clarity
- Keep tests focused on one feature or flow

## Locator Best Practices

**Priority of Selectors** (most to least preferred):

1. **By Role** - Most resilient and accessible
   ```typescript
   await page.getByRole("button", { name: "Submit" });
   await page.getByRole("heading", { name: "Welcome" });
   ```

2. **By Label** - Good for form inputs
   ```typescript
   await page.getByLabel("Email address");
   await page.getByLabel("Password");
   ```

3. **By Placeholder** - Fallback for inputs
   ```typescript
   await page.getByPlaceholder("Enter your email");
   ```

4. **By Text** - For static content
   ```typescript
   await page.getByText("Welcome back");
   ```

5. **By Test ID** - Last resort for dynamic content
   ```typescript
   await page.getByTestId("submit-button");
   ```

**Avoid:**
- CSS selectors based on classes (`.class-name`)
- XPath selectors
- ID selectors that might change

## Common Actions

### Navigation
```typescript
await page.goto("/path");
await page.waitForLoadState("networkidle");
```

### Clicking Elements
```typescript
await page.getByRole("button", { name: "Click me" }).click();
await page.locator("button").filter({ hasText: "Submit" }).click();
```

### Filling Forms
```typescript
await page.getByLabel("Email").fill("test@example.com");
await page.getByLabel("Password").fill("password123");
await page.getByRole("button", { name: "Submit" }).click();
```

### Selecting Options
```typescript
await page.getByLabel("Country").selectOption("Poland");
await page.getByRole("combobox").selectOption({ label: "Poland" });
```

### Checking/Unchecking
```typescript
await page.getByLabel("Remember me").check();
await page.getByLabel("Subscribe").uncheck();
```

### Typing with Delay
```typescript
await page.getByLabel("Search").type("search query", { delay: 100 });
```

## Assertions

### URL Assertions
```typescript
await expect(page).toHaveURL(/dashboard/);
await expect(page).toHaveURL("http://localhost:3000/dashboard");
```

### Text Content
```typescript
await expect(page.getByRole("heading")).toContainText("Welcome");
await expect(page.locator(".message")).toHaveText("Success");
```

### Visibility
```typescript
await expect(page.getByRole("alert")).toBeVisible();
await expect(page.getByRole("dialog")).toBeHidden();
```

### Element State
```typescript
await expect(page.getByRole("button")).toBeEnabled();
await expect(page.getByRole("button")).toBeDisabled();
await expect(page.getByLabel("Agree")).toBeChecked();
```

### Count
```typescript
await expect(page.getByRole("listitem")).toHaveCount(5);
```

### Screenshots
```typescript
await expect(page).toHaveScreenshot("homepage.png");
```

## Waiting Strategies

### Wait for Element
```typescript
await page.waitForSelector(".content", { state: "visible" });
await page.getByRole("alert").waitFor({ state: "visible" });
```

### Wait for Navigation
```typescript
await page.waitForURL("**/dashboard");
await page.waitForLoadState("networkidle");
```

### Wait for API Response
```typescript
const responsePromise = page.waitForResponse("**/api/groups");
await page.getByRole("button").click();
const response = await responsePromise;
```

### Wait for Function
```typescript
await page.waitForFunction(() => document.title === "Dashboard");
```

## Authentication Testing

### Login Flow
```typescript
test.describe("Authentication", () => {
  test("user can login successfully", async ({ page }) => {
    await page.goto("/login");

    await page.getByLabel("Email").fill("test@example.com");
    await page.getByLabel("Password").fill("password123");
    await page.getByRole("button", { name: /login/i }).click();

    await expect(page).toHaveURL(/dashboard/);
    await expect(page.getByRole("heading")).toContainText("Dashboard");
  });
});
```

### Authenticated State
```typescript
test.use({
  storageState: "auth.json", // Load saved authentication state
});

test("authenticated user can access dashboard", async ({ page }) => {
  await page.goto("/dashboard");
  // User is already logged in
});
```

## Testing User Flows

### Creating a Group (Example)
```typescript
test("user can create a new group", async ({ page }) => {
  // Given: User is on dashboard
  await page.goto("/dashboard");

  // When: User creates a new group
  await page.getByRole("button", { name: /create group/i }).click();

  await page.getByLabel("Group Name").fill("Test Group");
  await page.getByLabel("Budget").fill("100");
  await page.getByLabel("Event Date").fill("2025-12-25");

  await page.getByRole("button", { name: /save/i }).click();

  // Then: Group is created and displayed
  await expect(page).toHaveURL(/groups\/\d+/);
  await expect(page.getByRole("heading")).toContainText("Test Group");
});
```

## Best Practices

1. **Use Auto-Waiting**
   - Playwright automatically waits for elements to be actionable
   - Avoid manual `page.waitForTimeout()` unless absolutely necessary

2. **Isolate Tests**
   - Each test should be independent
   - Use `test.beforeEach()` for common setup
   - Clean up data after tests if needed

3. **Use Fixtures**
   - Create reusable fixtures for common setup
   - Use page fixtures for authenticated users

4. **Handle Network Conditions**
   - Test with slow networks
   - Mock API responses when needed
   - Use `page.route()` for request interception

5. **Screenshots and Videos**
   - Capture screenshots on failure automatically
   - Enable video recording for debugging
   - Use `trace: "on-first-retry"` for detailed debugging

6. **Parallel Execution**
   - Tests run in parallel by default
   - Use `test.describe.serial()` for dependent tests
   - Configure workers in `playwright.config.ts`

7. **Mobile Testing** (Future)
   - Use device emulation for responsive testing
   - Test touch interactions
   - Verify mobile-specific features

## Debugging

### Debug Mode
```bash
npm run test:e2e:debug
```

### Pause Execution
```typescript
await page.pause(); // Opens Playwright Inspector
```

### Console Logs
```typescript
page.on("console", (msg) => console.log(msg.text()));
```

### Network Logs
```typescript
page.on("request", (request) => console.log(">>", request.method(), request.url()));
page.on("response", (response) => console.log("<<", response.status(), response.url()));
```

## API Testing

Playwright can also test APIs:

```typescript
test("API: create group", async ({ request }) => {
  const response = await request.post("/api/groups", {
    data: {
      name: "Test Group",
      budget: 100,
      event_date: "2025-12-25",
    },
  });

  expect(response.ok()).toBeTruthy();
  const data = await response.json();
  expect(data).toHaveProperty("id");
});
```

## Common Patterns

### Testing Forms with Validation
```typescript
test("displays validation errors", async ({ page }) => {
  await page.goto("/groups/new");

  // Submit without filling required fields
  await page.getByRole("button", { name: /submit/i }).click();

  // Check for validation errors
  await expect(page.getByText("Name is required")).toBeVisible();
  await expect(page.getByText("Budget must be positive")).toBeVisible();
});
```

### Testing Modal Dialogs
```typescript
test("can delete group via modal", async ({ page }) => {
  await page.goto("/groups/1");

  await page.getByRole("button", { name: /delete/i }).click();

  // Modal should appear
  const dialog = page.getByRole("dialog");
  await expect(dialog).toBeVisible();

  // Confirm deletion
  await dialog.getByRole("button", { name: /confirm/i }).click();

  // Should redirect
  await expect(page).toHaveURL(/dashboard/);
});
```

### Testing Lists
```typescript
test("displays all participants", async ({ page }) => {
  await page.goto("/groups/1");

  const participants = page.getByRole("listitem");
  await expect(participants).toHaveCount(5);

  // Check first participant
  await expect(participants.first()).toContainText("John Doe");
});
```

## Configuration

### Only Test Chromium
```typescript
// playwright.config.ts
projects: [
  {
    name: "chromium",
    use: { ...devices["Desktop Chrome"] },
  },
],
```

### Set Base URL
```typescript
use: {
  baseURL: process.env.BASE_URL || "http://localhost:3000",
},
```

### Retry Strategy
```typescript
retries: process.env.CI ? 2 : 0,
```

## Resources

- [Playwright Documentation](https://playwright.dev/)
- [Best Practices](https://playwright.dev/docs/best-practices)
- [Locators Guide](https://playwright.dev/docs/locators)
- [API Reference](https://playwright.dev/docs/api/class-playwright)
